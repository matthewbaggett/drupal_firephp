<?php

require_once(dirname(__FILE__) ."/lib/FirePHPCore/lib/FirePHPCore/FirePHP.class.php");

function firephp_init(){
  global $firephp_time_checkpoints;
  $firephp_time_checkpoints = array();

  firephp_time_checkpoint("php_init", $_SERVER['REQUEST_TIME_FLOAT']);
  firephp_time_checkpoint("hook_init");
  firephp_log("Init");
}

/**
 * @return FirePHP
 */
function firephp_get_instance(){
  $firephp = FirePHP::getInstance(true);
  return $firephp;
}

/**
 * Implements hook_watchdog().
 *
 * Note: Some values may be truncated to meet database column size restrictions.
 */
function firephp_watchdog(array $log_entry) {
  if(count($log_entry['variables'])){
    $message = t($log_entry['message'], $log_entry['variables']);
  }else{
    $message = t($log_entry['message']);
  }

  $type = substr($log_entry['type'], 0, 50);
  $severity = _firephp_get_severity_term($log_entry['severity']);
  firephp_log("WATCHDOG ({$severity}) $type: {$message}");
}

function _firephp_get_severity_term($severity_id){
  $severities = array(
    WATCHDOG_DEBUG     => 'Debug',
    WATCHDOG_INFO      => 'Info',
    WATCHDOG_NOTICE    => 'Notice',
    WATCHDOG_WARNING   => 'Warning',
    WATCHDOG_ERROR     => 'Error',
    WATCHDOG_CRITICAL  => 'Critical',
    WATCHDOG_ALERT     => 'Alert',
    WATCHDOG_EMERGENCY => 'Emergency',
  );

  return $severities[$severity_id];
}

function firephp_log($message, $variables = array()){
  return firephp_get_instance()->log(t($message, $variables));
}

function firephp_time_checkpoint($label, $time = null){
  global $firephp_time_checkpoints;
  if(!$time){
    $time = microtime(true);
  }
  $firephp_time_checkpoints[] = [$time, $label];
}

/**
 *  Implements hook_exit().
 */
function firephp_exit($destination = NULL) {
  firephp_time_checkpoint('hook_exit');
  firephp_time_output();
}

function firephp_time_output(){
  global $firephp_time_checkpoints;
  $firephp = firephp_get_instance();
  $firephp->group("FirePHP Timing");
  foreach($firephp_time_checkpoints as $firephp_time_checkpoint){
    list($microtime, $label) = $firephp_time_checkpoint;
    $start = (!isset($start) || $microtime < $start) ? $microtime : $start;
    $end   = (!isset($end)   || $microtime > $end)   ? $microtime : $end;
    if(isset($last_microtime)){
      $display_microtime = $microtime - $last_microtime;
      $display_microtime = number_format($display_microtime, 4);
    }else{
      $display_microtime = "begin";
    }
    $firephp->log("{$display_microtime} - {$label}");
    $last_microtime = $microtime;
  }
  $firephp->log("Total execution time: " . number_format($end - $start, 4));
  $firephp->groupEnd();
}
